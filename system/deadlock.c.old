#include <xinu.h>
#include <stddef.h>

//TODO - add in your functions

static unsigned char visited[NLOCK + NPROC];
// ID of a lock that is involved in the deadlock
static lid32    dl_id;

/** Removes the edge from src to dest. */
static int dealloc_ord(int32 dest, int32 src);

/** Checks whether curr is a part of a cycle. */
static int has_cycle(int32 curr);

void rag_request(pid32 pid, lid32 lockid)
{
    /* Allocate and emplace node */
    struct RAG_Node *node = malloc(sizeof *node);
    node->id = lockid;
    node->next = RAG[NLOCK + pid];
    RAG[NLOCK + pid] = node;
}

void rag_alloc(pid32 pid, lid32 lockid)
{
    struct RAG_Node *node, *remove;
    int32 i;

    /* Allocate and emplace node */
    node = malloc(sizeof *node);
    node->id = NLOCK + pid;
    node->next = RAG[lockid];
    RAG[lockid] = node;

    /* Remove request edge from pid */
    dealloc_ord(lockid, NLOCK + pid);
}

void rag_dealloc(pid32 pid, lid32 lockid)
{
    /* First search for a request edge, and if not found search for an alloc edge */
    if (!dealloc_ord(lockid, NLOCK + pid))
        dealloc_ord(NLOCK + pid, lockid);
}

void rag_print()
{
    int32 i;
    struct RAG_Node *node;

    for (i = 0; i < NLOCK + NPROC; ++i) {
        /* Print node label */
        if (i < NLOCK)
            kprintf("L%d", i);
        else
            kprintf("p%d", i - NLOCK);
        
        /* Print connected edges */
        node = RAG[i];
        if (node == NULL) {
            kprintf(" -> NULL");
        } else {
            for (; node != NULL; node = node->next) {
                if (node->id < NLOCK)
                    kprintf(" -> L%d", node->id);
                else
                    kprintf(" -> p%d", node->id - NLOCK);
            }
        }

        kprintf("\n");
    }
}

int deadlock_detect()
{
    int32 i, j;

    for (i = NLOCK; i < NLOCK + NPROC; ++i) {
        /* Clear visited array */
        for (j = 0; j < NLOCK + NPROC; ++j)
            visited[j] = 0;

        if (has_cycle(i)) {
            kprintf("\n");
            return 1;
        }
    }

    return 0;
}

static int dealloc_ord(int32 dest, int32 src)
{
    struct RAG_Node *node, *remove;
    int found = 0;

    if (RAG[src] == NULL)
        return found;

    /* Remove request edge from pid */
    if (RAG[src]->id == dest) {
        remove = RAG[src];
        RAG[src] = RAG[src]->next;
        free(remove, sizeof(*remove));
    } else {
        /* If request edge wasn't at the head, search the list */
        for (node = RAG[src]; node->next != NULL; node = node->next) {
            if (node->next->id == dest) {
                remove = node->next;
                node->next = node->next->next;
                free(remove, sizeof(*remove));
                found = 1;
                break;
            }
        }
    }

    return found;
}

static int has_cycle(int32 curr)
{
    struct RAG_Node *node;

    /* Set curr as visited */
    visited[curr] = 1;

    /* Check each connected edge */
    for (node = RAG[curr]; node != NULL; node = node->next) {
        /* If origin was found, a cycle has occurred */
        if (visited[node->id]) {
            /* Set dl_id for deadlock_recover */
            if (node->id < NLOCK) {
                dl_id = node->id;
                kprintf("DEADLOCK DETECTED:\tL%d", node->id);
            } else {
                dl_id = RAG[node->id]->id;
                kprintf("DEADLOCK DETECTED:\tp%d", node->id - NLOCK);
            }
            
            return 1;
        } else {
            /* Recursively check for cycles */
            if (has_cycle(node->id)) {
                if (node->id < NLOCK)
                    kprintf(" <- L%d", node->id);
                else
                    kprintf(" <- p%d", node->id - NLOCK);
                
                return 1;
            }
        }
    }

    return 0;
}

void deadlock_recover()
{
    pid32 pid = RAG[dl_id]->id;
    struct lockentry *lock = &locktab[dl_id];
    struct RAG_Node *node;

    //rag_print();

    // Kill the process the lock is allocated to
    kill(pid - NLOCK - 1);
    kprintf("Passed kill\n");

    for (node = RAG[pid]; node != NULL; node = node->next) {
        kprintf("pid: %d, lid: %d\n", pid - NLOCK - 1, node->id + 1);
        remove(pid - NLOCK - 1, locktab[node->id + 1].wait_queue);
    }

    // Unlock mutex
    mutex_unlock(&lock->lock);
 
    while (RAG[pid] != NULL) {
        kprintf("%x\n", RAG[pid]);
        rag_dealloc(pid - NLOCK - 1, RAG[pid]->id + 1);
        kprintf("%x\n", RAG[pid]);
        rag_print();
        while(1);
        //kprintf("got here\n");
    }

    // Finish clearing RAG
    rag_dealloc(pid, dl_id);

    kprintf("DEADLOCK RECOVER\tkilling pid=%d to release lockid=%d\n", pid, dl_id);
}
